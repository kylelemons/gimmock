package gimmock

import (
	"fmt"
	"os"
	"strings"
	"bytes"

	"go/ast"
	"go/token"
	"go/parser"
)

var (
	MockDependencies = []string{
		"os",
		"github.com/kylelemons/gimmock",
	}
)

type Method struct {
	Name    string
	Params  []string
	Returns []string
}

func (m *Method) String() string {
	return m.Name + "(" + strings.Join(m.Params, ", ") + ") (" + strings.Join(m.Returns, ", ") + ")"
}

type Mock struct {
	Name    string
	Methods []*Method
}

func (m *Mock) String() string {
	lines := make([]string, len(m.Methods))
	for i, met := range m.Methods {
		lines[i] = "\t" + met.String() + "\n"
	}
	return "type " + m.Name + " interface {\n" + strings.Join(lines, "") + "}"
}

func (m *Mock) MockClass() string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprint(buf, "// Autogenerated by gimmock\n")
	fmt.Fprintf(buf, "type mock%s struct {\n", m.Name)
	fmt.Fprintf(buf, "\tcalls map[string][][]interface{}\n")
	fmt.Fprintf(buf, "\treturns map[string][][]interface{}\n")
	fmt.Fprintf(buf, "\tstubs map[string]func()[]interface{}\n")
	fmt.Fprint(buf, "}\n")
	fmt.Fprintf(buf, "\nfunc newMock%s() *mock%s {\n", m.Name, m.Name)
	fmt.Fprintf(buf, "\treturn &mock%s{\n", m.Name)
	fmt.Fprintf(buf, "\t\tcalls: map[string][][]interface{} {\n")
	for _, meth := range m.Methods {
		fmt.Fprintf(buf, "\t\t\t%q: {},\n", meth.Name)
	}
	fmt.Fprintf(buf, "\t\t},\n")
	fmt.Fprintf(buf, "\t\treturns: map[string][][]interface{} {\n")
	for _, meth := range m.Methods {
		fmt.Fprintf(buf, "\t\t\t%q: {},\n", meth.Name)
	}
	fmt.Fprintf(buf, "\t\t},\n")
	fmt.Fprintf(buf, "\t\tstubs: map[string]func()[]interface{} {},\n")
	fmt.Fprintf(buf, "\t}\n")
	fmt.Fprintf(buf, "}\n")
	for _, meth := range m.Methods {
		fmt.Fprintf(buf, "\nfunc (this *mock%s) %s(", m.Name, meth.Name)
		for i, param := range meth.Params {
			fmt.Fprintf(buf, "arg%d %s,", i, param)
		}
		fmt.Fprintf(buf, ") (")
		for i, ret := range meth.Returns {
			fmt.Fprintf(buf, "ret%d %s,", i, ret)
		}
		fmt.Fprintf(buf, ") {\n")
		fmt.Fprintf(buf, "\tstub, calls, rets := this.stubs[%q], this.calls[%q], this.returns[%q]\n",
			meth.Name, meth.Name, meth.Name)
		fmt.Fprintf(buf, "\tif len(calls) == 0 || (stub == nil && len(rets) == 0) {\n")
		fmt.Fprintf(buf, "\t\tpanic(&gimmock.UnexpectedCall{\n")
		fmt.Fprintf(buf, "\t\t\tInterface: \"%s\",\n", m.Name)
		fmt.Fprintf(buf, "\t\t\tMethod: \"%s\",\n", meth.Name)
		fmt.Fprintf(buf, "\t\t\tArgs: []interface{}{\n")
		for i := range meth.Params {
			fmt.Fprintf(buf, "\t\t\t\targ%d,\n", i)
		}
		fmt.Fprintf(buf, "\t\t\t},\n")
		fmt.Fprintf(buf, "\t\t})\n")
		fmt.Fprintf(buf, "\t}\n")
		fmt.Fprintf(buf, "\tvar call, ret []interface{}\n")
		if len(meth.Params) > 0 {
			fmt.Fprintf(buf, "\tcall, this.calls[%q] = calls[0], calls[1:]\n", meth.Name)
			fmt.Fprintf(buf, "\tif len(call) > 0 {\n")
			for i, arg := range meth.Params {
				if strings.IndexRune(arg, ']') >= 0 {
					fmt.Fprintf(buf, "\t\t{\n")
					fmt.Fprintf(buf, "\t\t\tgots, wants := arg%d, call[%d].(%s)\n", i, i, arg)
					fmt.Fprintf(buf, "\t\t\tbad := &gimmock.WrongArgument{\n")
					fmt.Fprintf(buf, "\t\t\t\t\tInterface: \"%s\",\n", m.Name)
					fmt.Fprintf(buf, "\t\t\t\t\tMethod: \"%s\",\n", meth.Name)
					fmt.Fprintf(buf, "\t\t\t\t\tIdx: %d,\n", i)
					fmt.Fprintf(buf, "\t\t\t\t\tGot: gots,\n")
					fmt.Fprintf(buf, "\t\t\t\t\tWant: wants,\n")
					fmt.Fprintf(buf, "\t\t\t\t}\n")
					fmt.Fprintf(buf, "\t\t\tif got, want := len(gots), len(wants); got != want { panic(bad) }\n")
					fmt.Fprintf(buf, "\t\t\tfor i, want := range wants { if gots[i] != want{ panic(bad) } }\n")
					fmt.Fprintf(buf, "\t\t}\n")
				} else {
					fmt.Fprintf(buf, "\t\tif got, want := arg%d, call[%d].(%s); got != want {\n", i, i, arg)
					fmt.Fprintf(buf, "\t\t\tpanic(&gimmock.WrongArgument{\n")
					fmt.Fprintf(buf, "\t\t\t\tInterface: \"%s\",\n", m.Name)
					fmt.Fprintf(buf, "\t\t\t\tMethod: \"%s\",\n", meth.Name)
					fmt.Fprintf(buf, "\t\t\t\tIdx: %d,\n", i)
					fmt.Fprintf(buf, "\t\t\t\tGot: got,\n")
					fmt.Fprintf(buf, "\t\t\t\tWant: want,\n")
					fmt.Fprintf(buf, "\t\t\t})\n")
					fmt.Fprintf(buf, "\t\t}\n")
				}
			}
			fmt.Fprintf(buf, "\t}\n")
		} else {
			fmt.Fprintf(buf, "\t_ = call // no arguments to process\n")
		}
		if len(meth.Returns) > 0 {
			fmt.Fprintf(buf, "\tif stub != nil {\n")
			fmt.Fprintf(buf, "\t\tret = stub()\n")
			fmt.Fprintf(buf, "\t} else {\n")
			fmt.Fprintf(buf, "\t\tret, this.returns[%q] = rets[0], rets[1:]\n", meth.Name)
			fmt.Fprintf(buf, "\t}\n")
			for i, ret := range meth.Returns {
				fmt.Fprintf(buf, "\tret%d = ret[%d].(%s)\n", i, i, ret)
			}
		} else {
			fmt.Fprintf(buf, "\t_ = ret // no return values to process\n")
		}
		fmt.Fprintf(buf, "\treturn\n")
		fmt.Fprintf(buf, "}\n")
		fmt.Fprintf(buf, "\nfunc (this *mock%s) Expect%s(", m.Name, meth.Name)
		for i, param := range meth.Params {
			fmt.Fprintf(buf, "arg%d %s,", i, param)
		}
		fmt.Fprintf(buf, ") (\n")
		fmt.Fprintf(buf, ") {\n")
		fmt.Fprintf(buf, "\tthis.calls[%q] = append(this.calls[%q], []interface{} {\n", meth.Name, meth.Name)
		for i := range meth.Params {
			fmt.Fprintf(buf, "\t\targ%d,\n", i)
		}
		fmt.Fprintf(buf, "\t})\n")
		fmt.Fprintf(buf, "}\n")
	}
	return buf.String()
}

func Process(filename string) (pkg string, mocks []*Mock, err os.Error) {
	fset := token.NewFileSet()
	file, err := parser.ParseFile(fset, filename, nil, parser.ParseComments)
	if err != nil {
		return "", nil, err
	}

	var toString func(interface{}) string
	toString = func(x interface{}) (str string) {
		switch x := x.(type) {
		case *ast.BasicLit:
			return x.Value
		case *ast.Ident:
			return x.Name
		case *ast.ArrayType:
			return "[" + toString(x.Len) + "]" + toString(x.Elt)
		case *ast.MapType:
			return "map[" + toString(x.Key) + "]" + toString(x.Value)
		case *ast.SelectorExpr:
			return toString(x.X) + "." + toString(x.Sel)
		case nil:
			return ""
		default:
			fmt.Fprintf(os.Stderr, "Unable to determine string for %T:\n", x)
			ast.Fprint(os.Stderr, fset, x, nil)
		}
		return "unknown"
	}

	pkg = toString(file.Name)

	for _, decl := range file.Decls {
		if gen, ok := decl.(*ast.GenDecl); ok && gen.Tok == token.TYPE {
			for _, spec := range gen.Specs {
				if tspec, ok := spec.(*ast.TypeSpec); ok {
					if iface, ok := tspec.Type.(*ast.InterfaceType); ok {
						mock := &Mock{
							Name: toString(tspec.Name),
						}
						mocks = append(mocks, mock)
						for _, method := range iface.Methods.List {
							meth := &Method{
								Name: toString(method.Names[0]),
							}
							mock.Methods = append(mock.Methods, meth)
							if f, ok := method.Type.(*ast.FuncType); ok {
								if f.Params != nil {
									for _, param := range f.Params.List {
										meth.Params = append(meth.Params, toString(param.Type))
									}
								}
								if f.Results != nil {
									for _, ret := range f.Results.List {
										meth.Returns = append(meth.Returns, toString(ret.Type))
									}
								}
							}
						}
					}
				}
			}
		}
	}

	return
}


